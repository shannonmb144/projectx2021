{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Time Series Extraction","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ct6WS0N-8ioA","executionInfo":{"status":"ok","timestamp":1638487255385,"user_tz":480,"elapsed":30393,"user":{"displayName":"Shannon Brownlee","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"02305997298141551989"}},"outputId":"78e53288-1fb1-4409-eb47-2cf8ba508a31"},"source":["import pandas as pd\n","import numpy as np\n","import math\n","import ee\n","from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","metadata":{"id":"VX-iqy0b8UiG"},"source":["malaria_dir = '/content/drive/Shareddrives/ProjectX 2021/data/RAW ODISHA MALARIA DATA/Malaria_2003-2013_Odisha/'\n","files = ['2003_malaria_bse_totsp.csv', '2004_malaria_bse_totsp.csv', '2005_malaria_bse_totsp.csv', '2006_malaria_bse_totsp.csv', '2007malaria_bse_totsp.csv', '2008_malaria_bse_totsp.csv', '2009_malaria_bse_totsp.csv', '2010_malaria_bse_totsp.csv', '2011_malaria_bse_totsp.csv', '2012_malaria_bse_totsp.csv', '2013_malaria1_bse_totsp.csv']\n","districts = {}\n","months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n","temp = pd.read_csv(malaria_dir + '2003_malaria_bse_totsp.csv')\n","counts = [0,0,0,0,0]\n","for index, row in temp.iterrows():\n","  if row['dist'] in districts:\n","    continue\n","  else:\n","    districts[row['dist']] = []\n","\n","for f in files:\n","  curr_file = malaria_dir + f\n","  df = pd.read_csv(curr_file)\n","  curr_year = f[0:4]\n","  for d in districts:\n","    for i in range(0, 12):\n","      districts[d].append(0)\n","  if int(curr_year) in [2003, 2004, 2005, 2006, 2007, 2008, 2009]:\n","    for index, row in df.iterrows():\n","      for i in range(len(months)):\n","        if row['mnth'] == months[i]:\n","          if math.isnan(row['totsp']):\n","            continue\n","          else:\n","            districts[row['dist']][i+(12*(int(curr_year)-2003))] += row['totsp']\n","  elif int(curr_year) == 2010:\n","    for index, row in df.iterrows():\n","      for i in range(len(months)):\n","        if row['Month'] == months[i]:\n","          if math.isnan(row['TOTSP']):\n","            continue\n","          else:\n","            if row['District'] == 'Bargarh':\n","              districts['Baragarh'][i+(12*(int(curr_year)-2003))] += row['TOTSP']\n","            elif row['District'] == 'Gajpati':\n","              districts['Gajapati'][i+(12*(int(curr_year)-2003))] += row['TOTSP']\n","            elif row['District'] == 'J.S PUR':\n","              districts['Jagatsingpur'][i+(12*(int(curr_year)-2003))] += row['TOTSP']\n","            elif row['District'] == 'Kendrapada':\n","              districts['Kendrapara'][i+(12*(int(curr_year)-2003))] += row['TOTSP']\n","            elif row['District'] == 'Koraput':\n","              districts['Koaraput'][i+(12*(int(curr_year)-2003))] += row['TOTSP']\n","            elif row['District'] == 'Nuapada':\n","              districts['Nuapara'][i+(12*(int(curr_year)-2003))] += row['TOTSP']\n","            else:\n","              districts[row['District']][i+(12*(int(curr_year)-2003))] += row['TOTSP']\n","  elif int(curr_year) in [2011, 2012]:\n","    for index, row in df.iterrows():\n","      for i in range(len(months)):\n","        if row['Month'] == months[i]:\n","          if math.isnan(row['Totsp']):\n","            continue\n","          else:\n","            if row['District'] == 'Bargarh':\n","              districts['Baragarh'][i+(12*(int(curr_year)-2003))] += row['Totsp']\n","            elif row['District'] == 'Gajpati':\n","              districts['Gajapati'][i+(12*(int(curr_year)-2003))] += row['Totsp']\n","            elif row['District'] == 'J.S PUR':\n","              districts['Jagatsingpur'][i+(12*(int(curr_year)-2003))] += row['Totsp']\n","            elif row['District'] == 'Kendrapada':\n","              districts['Kendrapara'][i+(12*(int(curr_year)-2003))] += row['Totsp']\n","            elif row['District'] == 'Koraput':\n","              districts['Koaraput'][i+(12*(int(curr_year)-2003))] += row['Totsp']\n","            elif row['District'] == 'Nuapada':\n","              districts['Nuapara'][i+(12*(int(curr_year)-2003))] += row['Totsp']\n","            else:\n","              districts[row['District']][i+(12*(int(curr_year)-2003))] += row['Totsp']\n","  elif int(curr_year) == 2013:\n","    for index, row in df.iterrows():\n","      for i in range(len(months)):\n","        if row['Month'] == months[i]:\n","          if math.isnan(row['TOTSP']):\n","            continue\n","          else:\n","            if row['Dist'] == 'Bargarh.':\n","              districts['Baragarh'][i+(12*(int(curr_year)-2003))] += row['TOTSP']\n","            elif row['Dist'] == 'BHADRAK':\n","              districts['Bhadrak'][i+(12*(int(curr_year)-2003))] += row['TOTSP']\n","            elif row['Dist'] == 'Gajpati':\n","              districts['Gajapati'][i+(12*(int(curr_year)-2003))] += row['TOTSP']\n","            elif row['Dist'] == 'J.S PUR' or row['Dist'] == 'Jagatsinghpur':\n","              districts['Jagatsingpur'][i+(12*(int(curr_year)-2003))] += row['TOTSP']\n","            elif row['Dist'] == 'Kendrapada':\n","              districts['Kendrapara'][i+(12*(int(curr_year)-2003))] += row['TOTSP']\n","            elif row['Dist'] == 'Koraput':\n","              districts['Koaraput'][i+(12*(int(curr_year)-2003))] += row['TOTSP']\n","            elif row['Dist'] == 'Nawarangapur':\n","              districts['Nawarangpur'][i+(12*(int(curr_year)-2003))] += row['TOTSP']\n","            elif row['Dist'] == 'Nuapada':\n","              districts['Nuapara'][i+(12*(int(curr_year)-2003))] += row['TOTSP']\n","            else:\n","              districts[row['Dist']][i+(12*(int(curr_year)-2003))] += row['TOTSP']"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"aIy-7bFYpmR4"},"source":["coords = {\n","    'Angul': (85.1511, 20.8444),\n","    'Balasore': (86.9135, 21.4934),\n","    'Bhadrak': (86.4963, 21.0574),\n","    'Bolangir': (83.4846, 20.7011),\n","    'Baragarh': (83.5070, 21.2550),\n","    'Boudh': (84.1435, 20.6607),\n","    'Cuttack': (85.8830, 20.4625),\n","    'Dhenkanal': (85.5981, 20.6505),\n","    'Deogarh': (84.7289, 21.5383),\n","    'Ganjam': (84.6897, 19.5860),\n","    'Gajapati': (84.1857, 19.1912),\n","    'Jagatsingpur': (86.1706, 20.2549),\n","    'Jajpur': (86.3326, 20.8341),\n","    'Jharsuguda': (84.0062, 21.8554),\n","    'Kalahandi': (83.1649, 19.9137),\n","    'Koaraput': (82.7123, 18.8135),\n","    'Keonjhar': (85.5817, 21.6289),\n","    'Kandhamal': (84.0167, 20.1342),\n","    'Kendrapara': (86.4289, 20.4969),\n","    'Khurda': (85.6223, 20.1863),\n","    'Mayurbhanj': (86.4187, 22.0087),\n","    'Malkangiri': (81.8825, 18.3436),\n","    'Nuapara': (82.5361, 20.8060),\n","    'Nawarangpur': (82.5470, 19.2281),\n","    'Nayagarh': (85.1038, 20.1231),\n","    'Puri': (85.8312, 19.8135),\n","    'Rayagada': (83.4163, 19.1712),\n","    'Sambalpur': (83.9812, 21.4669),\n","    'Sonepur': (83.8950, 20.8480),\n","    'Sundargarh': (84.0432, 22.1240)\n","}"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":626},"id":"gtMRIAFfpXT3","executionInfo":{"status":"error","timestamp":1638487293009,"user_tz":480,"elapsed":20393,"user":{"displayName":"Shannon Brownlee","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"02305997298141551989"}},"outputId":"ebcca119-9277-4dfd-f5bc-57418c3cbaaf"},"source":["# Trigger the authentication flow.\n","ee.Authenticate()\n","\n","# Initialize the library.\n","ee.Initialize()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["To authorize access needed by Earth Engine, open the following URL in a web browser and follow the instructions. If the web browser does not start automatically, please manually browse the URL below.\n","\n","    https://accounts.google.com/o/oauth2/auth?client_id=517222506229-vsmmajv00ul0bs7p89v5m89qs8eb9359.apps.googleusercontent.com&scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fearthengine+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdevstorage.full_control&redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&response_type=code&code_challenge=-L60tbdhvaiT-0m-upVj1o-rXioHdEAImBeE9V0s0xs&code_challenge_method=S256\n","\n","The authorization workflow will generate a code, which you should paste in the box below. \n","Enter verification code: 4/1AX4XfWgkGldh8QK92zAipML255xyID4xGORjbfQ3lSIyejhleyTOPe8-Z2A\n","\n","Successfully saved authorization token.\n"]},{"output_type":"error","ename":"EEException","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mHttpError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/ee/data.py\u001b[0m in \u001b[0;36m_execute_cloud_call\u001b[0;34m(call, num_retries)\u001b[0m\n\u001b[1;32m    333\u001b[0m   \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 334\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mcall\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexecute\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnum_retries\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnum_retries\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    335\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mgoogleapiclient\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mHttpError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/googleapiclient/_helpers.py\u001b[0m in \u001b[0;36mpositional_wrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    133\u001b[0m                     \u001b[0mlogger\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwarning\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmessage\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 134\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mwrapped\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    135\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/googleapiclient/http.py\u001b[0m in \u001b[0;36mexecute\u001b[0;34m(self, http, num_retries)\u001b[0m\n\u001b[1;32m    914\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mresp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstatus\u001b[0m \u001b[0;34m>=\u001b[0m \u001b[0;36m300\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 915\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mHttpError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresp\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcontent\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0muri\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0muri\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    916\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpostproc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresp\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcontent\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mHttpError\u001b[0m: <HttpError 403 when requesting https://earthengine.googleapis.com/v1alpha/projects/earthengine-legacy/algorithms?prettyPrint=false&alt=json returned \"Not signed up for Earth Engine. Visit https://earthengine.google.com/signup/\". Details: \"Not signed up for Earth Engine. Visit https://earthengine.google.com/signup/\">","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mEEException\u001b[0m                               Traceback (most recent call last)","\u001b[0;32m<ipython-input-4-4684fad80de3>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m# Initialize the library.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mee\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mInitialize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/ee/__init__.py\u001b[0m in \u001b[0;36mInitialize\u001b[0;34m(credentials, opt_url, cloud_api_key, http_transport, project)\u001b[0m\n\u001b[1;32m    123\u001b[0m       http_transport=http_transport)\n\u001b[1;32m    124\u001b[0m   \u001b[0;31m# Initialize the dynamically loaded functions on the objects that want them.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 125\u001b[0;31m   \u001b[0mApiFunction\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minitialize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    126\u001b[0m   \u001b[0mElement\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minitialize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    127\u001b[0m   \u001b[0mImage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minitialize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/ee/apifunction.py\u001b[0m in \u001b[0;36minitialize\u001b[0;34m(cls)\u001b[0m\n\u001b[1;32m    152\u001b[0m     \u001b[0;34m\"\"\"Initializes the list of signatures from the Earth Engine front-end.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    153\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mcls\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_api\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 154\u001b[0;31m       \u001b[0msignatures\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetAlgorithms\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    155\u001b[0m       \u001b[0mapi\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    156\u001b[0m       \u001b[0;32mfor\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msig\u001b[0m \u001b[0;32min\u001b[0m \u001b[0msignatures\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/ee/data.py\u001b[0m in \u001b[0;36mgetAlgorithms\u001b[0;34m()\u001b[0m\n\u001b[1;32m    982\u001b[0m     call = _get_cloud_api_resource().projects().algorithms().list(\n\u001b[1;32m    983\u001b[0m         project=_get_projects_path(), prettyPrint=False)\n\u001b[0;32m--> 984\u001b[0;31m   \u001b[0;32mreturn\u001b[0m \u001b[0m_cloud_api_utils\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconvert_algorithms\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_execute_cloud_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcall\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    985\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    986\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/ee/data.py\u001b[0m in \u001b[0;36m_execute_cloud_call\u001b[0;34m(call, num_retries)\u001b[0m\n\u001b[1;32m    334\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mcall\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexecute\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnum_retries\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnum_retries\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    335\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mgoogleapiclient\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mHttpError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 336\u001b[0;31m     \u001b[0;32mraise\u001b[0m \u001b[0m_translate_cloud_exception\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    337\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    338\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mEEException\u001b[0m: Not signed up for Earth Engine. Visit https://earthengine.google.com/signup/"]}]},{"cell_type":"code","metadata":{"id":"nvVKSIHIOzSF"},"source":["dataset = ee.ImageCollection(\"IDAHO_EPSCOR/TERRACLIMATE\")\n","i_date = '2003-01-01'\n","f_date = '2014-01-01'\n","min_t = dataset.select('tmmn').filterDate(i_date, f_date)\n","max_t = dataset.select('tmmx').filterDate(i_date, f_date)\n","precip = dataset.select('pr').filterDate(i_date, f_date)\n","write_dir = '/content/drive/Shareddrives/ProjectX 2021/data/PROCESSED ODISHA MALARIA DATA/'\n","for c in coords:\n","  lon = coords[c][0]\n","  lat = coords[c][1]\n","  poi = ee.Geometry.Point(lon, lat)\n","\n","  scale = 1000\n","  min_t_ts = min_t.getRegion(poi, scale).getInfo()\n","  max_t_ts = max_t.getRegion(poi, scale).getInfo()\n","  precip_ts = precip.getRegion(poi, scale).getInfo()\n","\n","\n","  years = []\n","  months = []\n","  min_temps = []\n","  max_temps = []\n","  precips = []\n","  for i in range(2003, 2014):\n","    for j in range(0, 12):\n","      years.append(i)\n","      months.append(j+1)\n","  for i in range(1, len(min_t_ts)):\n","    min_temps.append(min_t_ts[i][4]*0.1)\n","    max_temps.append(max_t_ts[i][4]*0.1)\n","    precips.append(precip_ts[i][4])\n","  df = pd.DataFrame(dict(Year = years, Month = months, Min_Temp = min_temps, Max_Temp = max_temps, Precipitation = precips, Malaria_Cases = districts[c]))\n","  df.to_csv(write_dir + c + '_Malaria_Weather_TS.csv')"],"execution_count":null,"outputs":[]}]}